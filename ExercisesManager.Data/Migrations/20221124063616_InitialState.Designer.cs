// <auto-generated />
using System;
using ExercisesManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExercisesManager.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221124063616_InitialState")]
    partial class InitialState
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExercisesManager.Data.Entites.Exercise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time without time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2022, 11, 24, 8, 36, 16, 724, DateTimeKind.Local).AddTicks(6611),
                            CreatedBy = "Data-Seed",
                            Description = "Exercise 1 Description",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            Name = "Exercise 1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2022, 11, 24, 8, 36, 16, 724, DateTimeKind.Local).AddTicks(6671),
                            CreatedBy = "Data-Seed",
                            Description = "Exercise 2 Description",
                            Duration = new TimeSpan(0, 0, 10, 0, 0),
                            Name = "Exercise 2"
                        });
                });

            modelBuilder.Entity("ExercisesManager.Data.Entites.UserExercise", b =>
                {
                    b.Property<long>("ApplicationUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(225)
                        .HasColumnType("character varying(225)");

                    b.HasKey("ApplicationUserId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("UserExercise");
                });

            modelBuilder.Entity("ExercisesManager.Data.Entites.UserExercise", b =>
                {
                    b.HasOne("ExercisesManager.Data.Entites.Exercise", null)
                        .WithMany("UserExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExercisesManager.Data.Entites.Exercise", b =>
                {
                    b.Navigation("UserExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
